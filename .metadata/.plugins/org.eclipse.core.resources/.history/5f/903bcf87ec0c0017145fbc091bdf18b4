/*
 * access_functions.c
 *
 *  Created on: Mar 14, 2017
 *      Author: coltonp
 */

#include "access_functions.h"
#include "MessagePool.h"
#include "helper_function.h"

_task_id dd_tcreate(
		unsigned int template_index,
		unsigned int deadline)
{
 	println("dd_tcreate begins:");

	// Open a message queue
	_queue_id creator_qid  = qopen(TASK_CREATOR_QUEUE);

	// Create a new task of the index and deadline
	unsigned int creation_time = _time_get_hwticks();
	_task_id this_task_id = _task_create(0,template_index,creation_time);

	// Set task priority to that of the minimum (25)
	_mqx_uint priority = _task_get_priority(this_task_id,&priority);
	unsigned int newpriority = _sched_get_min_priority(0);
	_task_set_priority(this_task_id,newpriority,&priority);

	// Allocate, populate and send a msg
	msgpushtask(
			TASK_CREATOR_QUEUE, // src
			DD_QUEUE,			// target
			taskListFactory(	// the new task
				this_task_id,
				deadline,
				template_index,
				creation_time),
			(unsigned char *)"TASK CREATED\n");

	// Wait for reply at the q above
	MESSAGE_PTR msg_ptr = msgreceive(TASK_CREATOR_QUEUE);

	// Destroy the Q
	_msgq_close(creator_qid);

	// print the message
	printf(msg_ptr->DATA);


	// free the message
	_msg_free(msg_ptr);

 	println("dd_tcreate ends:");
	//Returns to the invoking task (todo errors)
	return this_task_id;
}

unsigned int dd_delete(unsigned int task_id) {
	// Open a message queue
	_queue_id deletor_qid  = qopen(TASK_DELETOR_QUEUE);

	// Allocate, populate and send a msg
	//msgpush(DD_QUEUE, taskListFactory(DD_QUEUE, this_task_id, deadline, template_index, _time_get_hwticks()));

	// Wait for reply at the q above
	MESSAGE_PTR msg_ptr = msgreceive(TASK_DELETOR_QUEUE);

	// Destroy the Q
	_msgq_close(deletor_qid);

	// use the message (check for error?)

	// free the message
	_msg_free(msg_ptr);

	//Returns error (task not deleted or found) or no error (task deleted)
	return 1;
}

unsigned int dd_return_active_list(TASK_NODE ** active_tasks_head_ptr) {
	// Open a message queue
	_queue_id active_list_qid  = qopen(ACTIVE_LIST_QUEUE);
	// Allocate, populate and send a msg
	//msgpush(DD_QUEUE, taskListFactory(DD_QUEUE, this_task_id, deadline, template_index, _time_get_hwticks()));

	// Wait for reply at the q above
	MESSAGE_PTR msg_ptr = msgreceive(ACTIVE_LIST_QUEUE);

	// Destroy the Q
	_msgq_close(active_list_qid);

	// use the message to get the active list and set to the paramater above

	// free the message
	_msg_free(msg_ptr);

	//Returns error or no error
	return 1;
}

unsigned int dd_return_overdue_list(TASK_NODE ** overdue_tasks_head_ptr) {
	// Open a message queue
	_queue_id overdue_list_qid  = qopen(OVERDUE_LIST_QUEUE);
	// Allocate, populate and send a msg
	//msgpush(DD_QUEUE, taskListFactory(DD_QUEUE, this_task_id, deadline, template_index, _time_get_hwticks()));

	// Wait for reply at the q above
	MESSAGE_PTR msg_ptr = msgreceive(OVERDUE_LIST_QUEUE);

	// Destroy the Q
	_msgq_close(overdue_list_qid);

	// use the message to get the active list and set to the paramater above

	// free the message
	_msg_free(msg_ptr);

	//Returns error or no error
	return 1;
}
