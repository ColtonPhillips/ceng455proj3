/*
 * MessagePool.c
 *
 *  Created on: Mar 14, 2017
 *      Author: coltonp
 */
#include "MessagePool.h"
#include <stdio.h>

// helper function to open a Q
_queue_id qopen(int QTYPE) {
	_queue_id qid  = _msgq_open(QTYPE, 0);
	if (qid == 0) {
	  printf("\nCould not open a message queue\n");
	  _task_block();
	}
	return qid;
}

// helper function to allocate a message
MESSAGE_PTR msgalloc() {
	MESSAGE_PTR msg_ptr = (MESSAGE_PTR)_msg_alloc(message_pool);
	if (msg_ptr == NULL) {
		 printf("\nCould not allocate a message\n");
		 _task_block();
	}
	return msg_ptr;
}

/* create a message pool and open the DD's queue preemptively */
void init_message_pool() {
	   message_pool = _msgpool_create(sizeof(MESSAGE),
		  80, 0, 0);
	   if (message_pool == MSGPOOL_NULL_POOL_ID) {
		  printf("\nCould not create a handler message pool\n");
		  _task_block();
	   }

	   // Open a Q for the DD scheduler to use
	   	_queue_id dd_qid = qopen(DD_QUEUE);
}

// returns a task list pointer but probably leaks memory
TASK_LIST_PTR taskListFactory(
		unsigned int taskid,
		unsigned int deadline,
		unsigned int task_type,
		unsigned int creation_time)
{
	TASK_LIST_PTR tl_ptr = _mem_alloc(sizeof(TASK_LIST_PTR));

	//TASK_LIST *tl, task;
	//tl = &task;
	tl_ptr->tid = taskid;
	tl_ptr->deadline = deadline;
	tl_ptr->task_type = task_type;
	tl_ptr->creation_time = creation_time;
	return tl_ptr;
}

// helper function to send message_ptr
void msgsend(MESSAGE_PTR msg_ptr) {
	if (!_msgq_send(msg_ptr)) {
		printf("\nCould not send a message\n");
		_task_block();
	}
}

// Fill a message pointer (source qid, target qid, task list, and string msg data)
void msgpop(
		MESSAGE_PTR msg_ptr,
		_queue_id qidSource,
		_queue_id qidTarget,
		TASK_LIST_PTR task_ptr,
		unsigned char * data)
{
	msg_ptr->HEADER.SOURCE_QID = _msgq_get_id(0, qidSource);
	msg_ptr->HEADER.TARGET_QID = _msgq_get_id(0, qidTarget);
	msg_ptr->HEADER.SIZE = sizeof(MESSAGE_HEADER_STRUCT) + sizeof(TASK_LIST) + strlen(data) + 1;
	msg_ptr->TASK_DATA = *task_ptr;
	strcpy(msg_ptr->DATA, data);
}

// Push a message to the target qid
void msgpushtask(
		int qidSource,
		int qidTarget,
		TASK_LIST_PTR task_list_ptr,
		unsigned char * data)
{
	// Allocate a message
	MESSAGE_PTR msg_ptr = msgalloc();

	// Populate a message
	msgpop(msg_ptr, qidSource, qidTarget, task_list_ptr, data);

	// Send the message
	msgsend(msg_ptr);
	// no need to return message pointer because
	//the memory is not to be freed by the creator of msg
}

// Just fill the tasklist with garbage. It's not important for some messages.
void msgpushdata(int qidSource, int qidTarget, char * data) {
	msgpushtask(
		qidSource,
		qidTarget,
		taskListFactory(0, 0, 0, _time_get_hwticks()),
		data);
}

// helper function to receive message of type QTYPE
MESSAGE_PTR msgreceive(int QTYPE) {
	MESSAGE_PTR msg_ptr = _msgq_receive(QTYPE, 0);
	if (msg_ptr == NULL) {
		printf("\nCould not receive an DD Scheduler message\n");
		_task_block();
	}
	return msg_ptr;
}

// helper function to see if a msg ptr has same target qid as QTYPE
bool msgtarget_equals_q(MESSAGE_PTR msg_ptr, int QTYPE) {
	return (msg_ptr->HEADER.TARGET_QID == _msgq_get_id(0, QTYPE));
}

// helper function to see if a msg ptr has same source qid as QTYPE
bool msgsrc_equals_q(MESSAGE_PTR msg_ptr, int QTYPE) {
	return (msg_ptr->HEADER.SOURCE_QID == _msgq_get_id(0, QTYPE));
}
