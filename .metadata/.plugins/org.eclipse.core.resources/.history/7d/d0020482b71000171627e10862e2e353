/*
 * MessagePool.c
 *
 *  Created on: Mar 14, 2017
 *      Author: coltonp
 */
#include "MessagePool.h"
#include <stdio.h>
#include "helper_function.h"

// Open a Q
_queue_id qopen(_queue_number QNUMBER) {
	_queue_id qid  = _msgq_open(QNUMBER, 0);
	if (qid == 0) {
	  printf("\nCould not open a private message queue\n");
	  printf("%d\n",(int)_task_get_error());
	}
	return qid;
}

// Allocate a task type message
MESSAGE_PTR msgalloc() {
	MESSAGE_PTR pMsg = (MESSAGE_PTR)_msg_alloc(message_pool);
	if (pMsg == NULL) {
		 printf("\nCould not allocate a message\n");
		 _task_block();
	}
	return pMsg;
}

// Allocate a monitor type message
MONITOR_MESSAGE_PTR monitormsgalloc() {
	MONITOR_MESSAGE_PTR pMonMsg = (MONITOR_MESSAGE_PTR)_msg_alloc(monitor_message_pool);
	if (pMonMsg == NULL) {
		 printf("\nCould not allocate a message\n");
		 _task_block();
	}
	return pMonMsg;
}

// The main task initializes a group of message pools (2)
#define NUM_OF_MESSAGES 80
void init_message_pools() {
	   message_pool = _msgpool_create(sizeof(MESSAGE),
			   NUM_OF_MESSAGES, 1, 0);
	   if (message_pool == MSGPOOL_NULL_POOL_ID) {
		  printf("\nCould not create a message pool\n");
		  _task_block();
	   }

	   monitor_message_pool = _msgpool_create(sizeof(MONITOR_MESSAGE),
		   NUM_OF_MESSAGES, 1, 0);
	   if (monitor_message_pool == MSGPOOL_NULL_POOL_ID) {
		  printf("\nCould not create a monitor message pool\n");
		  _task_block();
	   }
}

// Create a task node (copy not pointer)
TASK_NODE taskNodeFactory(
		unsigned int taskid,
		unsigned int deadline,
		unsigned int task_type,
		unsigned int creation_time)
{
	TASK_NODE tl;
	tl.tid = taskid;
	tl.deadline = deadline;
	tl.task_type = task_type;
	tl.creation_time = creation_time;
	return tl;
}

// Send a task type message which has a given target
void msgsend(MESSAGE_PTR pMsg) {
	if (!_msgq_send(pMsg)) {
		printf("\nCould not send a message\n");
		printf("%d\n",(int)_task_get_error());
		_task_block();
	}
}

// Send a monitor type message which has a given target
void monitormsgsend(MONITOR_MESSAGE_PTR pMonMsg) {
	if (!_msgq_send(pMonMsg)) {
		//printf("\nCould not send a monitor message\n");
		//putchar((char)_task_get_error());
		//printf("%d\n",(int)_task_get_error());
		//_time_delay_ticks(10);
		//abortme();
		_task_block();
	}
}

// Populate a monitor type pMsg so it's ready to be sent
void monitormsgpop(
		MONITOR_MESSAGE_PTR pMonMsg,
		_queue_number qNumberSource,
		_queue_number qNumberTarget,
		TASK_NODE_PTR taskHead_ptr,
		unsigned int size,
		unsigned char * data)
{
	pMonMsg->HEADER.SOURCE_QID = _msgq_get_id(0, qNumberSource);
	pMonMsg->HEADER.TARGET_QID = _msgq_get_id(0, qNumberTarget);
	pMonMsg->HEADER.SIZE = sizeof(MONITOR_MESSAGE);
	pMonMsg->monitor_data.task_list_head = taskHead_ptr;
	pMonMsg->monitor_data.task_list_size = size;
	strcpy((char * )pMonMsg->DATA, (char * ) data);
}

// Populate a task type pMsg so it's ready to be sent
void msgpop(
		MESSAGE_PTR pMsg,
		_queue_number qNumberSource,
		_queue_number qNumberTarget,
		TASK_NODE task,
		unsigned char * data)
{
	pMsg->HEADER.SOURCE_QID = _msgq_get_id(0, qNumberSource);
	pMsg->HEADER.TARGET_QID = _msgq_get_id(0, qNumberTarget);
	pMsg->HEADER.SIZE = sizeof(MESSAGE);
	pMsg->TASK_DATA = task;
	strcpy((char * )pMsg->DATA, (char * ) data);
}


// Make and send a task type message
void msgpushtask(
		_queue_number qNumberSource,
		_queue_number qNumberTarget,
		TASK_NODE task_node,
		unsigned char * data)
{
	// Allocate a message
	MESSAGE_PTR msg_ptr = msgalloc();

	// Populate a message
	msgpop(msg_ptr, qNumberSource, qNumberTarget, task_node, data);

	// Send the message
	msgsend(msg_ptr);
	// no need to return message pointer because
	//the memory is not to be freed by the creator of msg
}

// Make and send a monitor type message
void monitormsgpush(
		_queue_number qNumberSource,
		_queue_number qNumberTarget,
		TASK_NODE_PTR task_node_ptr,
		unsigned int size,
		unsigned char * data)
{
	// Allocate a message
	MONITOR_MESSAGE_PTR mon_msg_ptr = monitormsgalloc();

	// Populate a message
	monitormsgpop(mon_msg_ptr, qNumberSource, qNumberTarget, task_node_ptr, size, data);

	// Send the message
	monitormsgsend(mon_msg_ptr);
	// no need to return message pointer because
	//the memory is not to be freed by the creator of msg
}

// Make and send a task type message, where the only important field is DATA
void msgpushdata(_queue_number qNumberSource, _queue_number qNumberTarget, unsigned char * data) {
	msgpushtask(
		qNumberSource,
		qNumberTarget,
		taskNodeFactory(0, 0, 0, currentTime()),
		data);
}

// Receive a task type message
MESSAGE_PTR msgreceive(_queue_number QNUMBER) {
	MESSAGE_PTR msg_ptr = _msgq_receive(_msgq_get_id(0,QNUMBER), 0);
	if (msg_ptr == NULL) {
		printf("\nCould not receive a message\n");
		printf("%d\n",(int)_task_get_error());
		_task_block();
	}
	return msg_ptr;
}

// Receive a monitor type message
MONITOR_MESSAGE_PTR monitormsgreceive(_queue_number QNUMBER) {
	MONITOR_MESSAGE_PTR mon_msg_ptr = _msgq_receive(_msgq_get_id(0,QNUMBER), 0);
	if (mon_msg_ptr == NULL) {
		printf("\nCould not receive a message\n");
		printf("%d\n",(int)_task_get_error());
		_task_block();
	}
	return mon_msg_ptr;
}

// Receive a task type message with a timeout
MESSAGE_PTR msgreceivetimeout(_queue_number QNUMBER, unsigned int timeout){
	MESSAGE_PTR msg_ptr = _msgq_receive(_msgq_get_id(0,QNUMBER), timeout);
	if (msg_ptr == NULL) {
		// TODO: Check if the NULL is an error or a timeout. We're assuming its a timeout. :/
		println("MSGTIMEOUT");
	}
	return msg_ptr;
}

// helper function to see if a msg ptr has same target qid as _queue_number QTYPE
bool msgtarget_equals_q(MESSAGE_PTR msg_ptr, _queue_number QNUMBER) {
	return (msg_ptr->HEADER.TARGET_QID == _msgq_get_id(0, QNUMBER));
}

// helper function to see if a msg ptr has same source qid as _queue_number QTYPE
bool msgsrc_equals_q(MESSAGE_PTR msg_ptr, _queue_number QNUMBER) {
	return (msg_ptr->HEADER.SOURCE_QID == _msgq_get_id(0, QNUMBER));
}
